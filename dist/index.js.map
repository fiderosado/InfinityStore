{"version":3,"file":"index.js","sources":["../src/InfinityStore.js"],"sourcesContent":["\"use client\"\r\nimport { useEffect , useState , useRef , useCallback } from \"react\";\r\n\r\n/***\r\n * InfinityStore is a powerful hook that allows you to manage multiple states in a single React hook for managing a state storage without limits\r\n * @param name\r\n * @param initialStore\r\n * @param callback\r\n * @returns {{state: {}, store: ((function(*): *)|*)}}\r\n * @constructor\r\n */\r\nconst InfinityStore = (\r\n  name ='InfinityStore' ,\r\n  initialStore = {} ,\r\n  callback = () => ({})\r\n) => {\r\n  let loading = false;\r\n  /**\r\n   * Retrieves the stored state from localStorage using the provided name.\r\n   * If no stored state is found, returns an empty object.\r\n   *\r\n   * @type {Object}\r\n   */\r\n  function getInitialState(){\r\n    if ( typeof window !== \"undefined\" ){\r\n      const storedState = JSON.parse(localStorage.getItem(name) || \"{}\");\r\n      return { ...initialStore , ...storedState };\r\n    }\r\n    return initialStore;\r\n  }\r\n  /**\r\n   * React state hook that combines the initial state with the stored state.\r\n   *\r\n   * @type {[Object, function]}\r\n   */\r\n  const [states , setStates] = useState(getInitialState());\r\n  /**\r\n   * React ref to store the current state.\r\n   *\r\n   * @type {Object}\r\n   */\r\n  const stateRef = useRef(states);\r\n  /**\r\n   * React ref for the BroadcastChannel.\r\n   *\r\n   * @type {Object}\r\n   */\r\n  const channelRef = useRef(null);\r\n  /**\r\n   * React ref for the state proxy.\r\n   *\r\n   * @type {Object}\r\n   */\r\n  const stateProxy = useRef(null);\r\n  /***\r\n   * stateManager is a function that allows you to manage the state\r\n   * @type {function(*): {set: function(*, *): void, get: function(): *, value: *}}\r\n   */\r\n  const stateManager = useCallback(\r\n    (key) => {\r\n      /***\r\n       * set is a function that allows you to update the state\r\n       * @param valueOrUpdater\r\n       * @param callback\r\n       */\r\n      const set = (valueOrUpdater , callback) => {\r\n        !loading && setStates((prev) => {\r\n          loading = true;\r\n          const currentValue = prev[key];\r\n          let newValue;\r\n\r\n          if ( typeof valueOrUpdater === \"function\" ){\r\n            newValue = valueOrUpdater(currentValue);\r\n          } else if (\r\n            typeof currentValue === \"object\" && currentValue !== null && typeof valueOrUpdater === \"object\" && valueOrUpdater !== null && !Array.isArray(valueOrUpdater)\r\n          ){\r\n            newValue = { ...currentValue , ...valueOrUpdater };\r\n          } else {\r\n            newValue = valueOrUpdater;\r\n          }\r\n          console.log(\"setttt--->\" , { prev , newValue , valueOrUpdater });\r\n          const updatedState = { ...prev , [key]: newValue };\r\n          if ( callback ){\r\n            callback(updatedState[key]);\r\n          }\r\n          channelRef.current?.postMessage({ type: \"stateChange\" , state: updatedState });\r\n          loading = false;\r\n          return updatedState;\r\n        });\r\n      };\r\n      return {\r\n        value: states[key] ,\r\n        set ,\r\n        get: () => states[key]\r\n      };\r\n    } ,\r\n    [states]\r\n  );\r\n\r\n  const refresh = () => {\r\n    stateProxy.current = new Proxy(\r\n      {} ,\r\n      {\r\n        get(_ , prop){\r\n          if ( prop in states ){\r\n            const { value , get , set } = stateManager(prop);\r\n            const getterFunction = () => value;\r\n            getterFunction.set = set;\r\n            getterFunction.get = get;\r\n            return Object.assign(getterFunction , callback(stateProxy.current));\r\n          }\r\n          return Object.assign(() => ({ handler: \"target\" }) , {\r\n            get: () => false ,\r\n            put: () => {\r\n            }\r\n          });\r\n        }\r\n      }\r\n    );\r\n  };\r\n  /***\r\n   * stateProxy is a function that allows you to manage the state\r\n   * @type {{}}\r\n   */\r\n  if ( !stateProxy.current ){\r\n    refresh();\r\n  }\r\n\r\n  /***\r\n   * storeResponse is a function that allows you to get the current\r\n   * @type {(function(*): (unknown))|*}\r\n   */\r\n  const storeResponse = useCallback(\r\n    (keys) => {\r\n      /***\r\n       * keys is a function that allows you to get the current state\r\n       */\r\n      if ( !keys ){\r\n        return { ...states };\r\n      }\r\n      /***\r\n       * keys is a function that allows you to get the current state\r\n       */\r\n      if ( !Array.isArray(keys) ){\r\n        throw new Error(\"La entrada a getAll debe ser un array de claves.\");\r\n      }\r\n      /***\r\n       * result is a function that allows you to get the current state\r\n       */\r\n      return keys.reduce(\r\n        (result , key) => {\r\n          if ( key in states ){\r\n            result[key] = states[key];\r\n          } else {\r\n            throw new Error(`El estado con clave \"${ key }\" no existe.`);\r\n          }\r\n          return result;\r\n        } ,\r\n        {}\r\n      );\r\n    } ,\r\n    [states]\r\n  );\r\n\r\n  /**\r\n   * useEffect hook to handle storage changes and channel messages.\r\n   * It updates the state when the localStorage or BroadcastChannel changes.\r\n   *\r\n   * @param {string} name - The name used as the key in localStorage and BroadcastChannel.\r\n   * @param {function} setStates - Function to update the state.\r\n   */\r\n  useEffect(() => {\r\n    if ( typeof window !== \"undefined\" ) {\r\n      /**\r\n       * Handles changes in localStorage and updates the state.\r\n       *\r\n       * @param {StorageEvent} event - The storage event that triggers the state update.\r\n       */\r\n      const handleStorageChange = (event) => {\r\n        if (event.key === name && event.newValue) {\r\n          const newState = JSON.parse(event.newValue);\r\n          setStates(newState);\r\n        }\r\n      };\r\n      /**\r\n       * Handles messages from the BroadcastChannel and updates the state.\r\n       *\r\n       * @param {MessageEvent} event - The message event that triggers the state update.\r\n       */\r\n      const handleChannelMessage = (event) => {\r\n        if (event.data.type === \"stateChange\") {\r\n          setStates(event.data.state);\r\n        }\r\n      };\r\n      window.addEventListener(\"storage\", handleStorageChange);\r\n      channelRef.current = new BroadcastChannel(name);\r\n      channelRef.current.addEventListener(\"message\", handleChannelMessage);\r\n      return () => {\r\n        window.removeEventListener(\"storage\", handleStorageChange);\r\n        channelRef.current?.close();\r\n      };\r\n    }\r\n  } , [name]);\r\n  useEffect(() => {\r\n    if ( typeof window !== \"undefined\" ) {\r\n      stateRef.current = states;\r\n      localStorage.setItem(name, JSON.stringify(states));\r\n    }\r\n  } , [name , states]);\r\n  useEffect(() => {\r\n    const syncState = (event) => {\r\n      if ( event.key === name ){\r\n        const newState = JSON.parse(event.newValue);\r\n        setStates(newState);\r\n      }\r\n    };\r\n  } , []);\r\n  return {\r\n    store : stateProxy.current ,\r\n    state : storeResponse\r\n  };\r\n};\r\n\r\nexport default InfinityStore;\r\n"],"names":["InfinityStore","name","initialStore","callback","loading","getInitialState","window","storedState","JSON","parse","localStorage","getItem","states","setStates","useState","stateRef","useRef","channelRef","stateProxy","stateManager","useCallback","key","set","valueOrUpdater","prev","currentValue","newValue","Array","isArray","console","log","updatedState","current","postMessage","type","state","value","get","refresh","Proxy","_","prop","getterFunction","Object","assign","handler","put","storeResponse","keys","Error","reduce","result","useEffect","handleStorageChange","event","newState","handleChannelMessage","data","addEventListener","BroadcastChannel","removeEventListener","close","setItem","stringify","store"],"mappings":"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"}