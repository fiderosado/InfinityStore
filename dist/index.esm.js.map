{"version":3,"file":"index.esm.js","sources":["../src/InfinityStore.js"],"sourcesContent":["\"use client\"\r\nimport { useEffect , useState , useRef , useCallback } from \"react\";\r\n\r\n/***\r\n * InfinityStore is a powerful hook that allows you to manage multiple states in a single React hook for managing a state storage without limits\r\n * @param name\r\n * @param initialStore\r\n * @param callback\r\n * @returns {{state: null, store: ((function(*): (unknown))|*)}|(function(): *)|((function(): {handler: string}) & {get: (function(): boolean), put: put})}\r\n * @constructor\r\n */\r\nconst InfinityStore = (\r\n  name ,\r\n  initialStore ,\r\n  callback = () => ({})\r\n) => {\r\n  /**\r\n   * Retrieves the stored state from localStorage using the provided name.\r\n   * If no stored state is found, returns an empty object.\r\n   *\r\n   * @type {Object}\r\n   */\r\n  function getInitialState(){\r\n    if ( typeof window !== \"undefined\" ){\r\n      const storedState = JSON.parse(localStorage.getItem(name) || \"{}\");\r\n      return { ...initialStore , ...storedState };\r\n    }\r\n    return initialStore;\r\n  }\r\n  /**\r\n   * React state hook that combines the initial state with the stored state.\r\n   *\r\n   * @type {[Object, function]}\r\n   */\r\n  const [states , setStates] = useState(getInitialState());\r\n  /**\r\n   * React ref to store the current state.\r\n   *\r\n   * @type {Object}\r\n   */\r\n  const stateRef = useRef(states);\r\n  /**\r\n   * React ref for the BroadcastChannel.\r\n   *\r\n   * @type {Object}\r\n   */\r\n  const channelRef = useRef(null);\r\n  /**\r\n   * React ref for the state proxy.\r\n   *\r\n   * @type {Object}\r\n   */\r\n  const stateProxy = useRef(null);\r\n  /***\r\n   * stateManager is a function that allows you to manage the state\r\n   * @type {function(*): {set: function(*, *): void, get: function(): *, value: *}}\r\n   */\r\n  const stateManager = useCallback(\r\n    (key) => {\r\n      /***\r\n       * set is a function that allows you to update the state\r\n       * @param valueOrUpdater\r\n       * @param callback\r\n       */\r\n      const set = (valueOrUpdater , callback) => {\r\n        setStates((prev) => {\r\n          const currentValue = prev[key];\r\n          let newValue;\r\n          if ( typeof valueOrUpdater === \"function\" ){\r\n            newValue = valueOrUpdater(currentValue);\r\n          } else if (\r\n            typeof currentValue === \"object\" &&\r\n            currentValue !== null &&\r\n            typeof valueOrUpdater === \"object\" &&\r\n            valueOrUpdater !== null &&\r\n            !Array.isArray(valueOrUpdater)\r\n          ){\r\n            newValue = { ...currentValue , ...valueOrUpdater };\r\n          } else {\r\n            newValue = valueOrUpdater;\r\n          }\r\n          const updatedState = { ...prev , [key]: newValue };\r\n          if ( callback ) callback(updatedState[key]);\r\n          channelRef.current?.postMessage({ type: \"stateChange\" , state: updatedState });\r\n          return updatedState;\r\n        });\r\n      };\r\n      return {\r\n        value: states[key] ,\r\n        set ,\r\n        get: () => states[key]\r\n      };\r\n    } ,\r\n    [states]\r\n  );\r\n\r\n  if ( !stateProxy.current ){\r\n    /***\r\n     * stateProxy is a function that allows you to manage the state\r\n     * @type {{}}\r\n     */\r\n    stateProxy.current = new Proxy(\r\n      {} ,\r\n      {\r\n        get(_ , prop){\r\n          if ( prop in states ){\r\n            const { value , get , set } = stateManager(prop);\r\n            const getterFunction = () => value;\r\n            getterFunction.set = set;\r\n            getterFunction.get = get;\r\n            return Object.assign(getterFunction , callback(stateProxy.current));\r\n          }\r\n          return Object.assign(() => ({ handler: \"target\" }) , {\r\n            get: () => false ,\r\n            put: () => {\r\n            }\r\n          });\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  /***\r\n   * storeResponse is a function that allows you to get the current\r\n   * @type {(function(*): (unknown))|*}\r\n   */\r\n  const storeResponse = useCallback(\r\n    (keys) => {\r\n      /***\r\n       * keys is a function that allows you to get the current state\r\n       */\r\n      if ( !keys ){\r\n        return { ...states };\r\n      }\r\n      /***\r\n       * keys is a function that allows you to get the current state\r\n       */\r\n      if ( !Array.isArray(keys) ){\r\n        throw new Error(\"La entrada a getAll debe ser un array de claves.\");\r\n      }\r\n      /***\r\n       * result is a function that allows you to get the current state\r\n       */\r\n      return keys.reduce(\r\n        (result , key) => {\r\n          if ( key in states ){\r\n            result[key] = states[key];\r\n          } else {\r\n            throw new Error(`El estado con clave \"${ key }\" no existe.`);\r\n          }\r\n          return result;\r\n        } ,\r\n        {}\r\n      );\r\n    } ,\r\n    [states]\r\n  );\r\n\r\n  /**\r\n   * useEffect hook to handle storage changes and channel messages.\r\n   * It updates the state when the localStorage or BroadcastChannel changes.\r\n   *\r\n   * @param {string} name - The name used as the key in localStorage and BroadcastChannel.\r\n   * @param {function} setStates - Function to update the state.\r\n   */\r\n  useEffect(() => {\r\n    if ( typeof window !== \"undefined\" ) {\r\n      /**\r\n       * Handles changes in localStorage and updates the state.\r\n       *\r\n       * @param {StorageEvent} event - The storage event that triggers the state update.\r\n       */\r\n      const handleStorageChange = (event) => {\r\n        if (event.key === name && event.newValue) {\r\n          const newState = JSON.parse(event.newValue);\r\n          setStates(newState);\r\n        }\r\n      };\r\n      /**\r\n       * Handles messages from the BroadcastChannel and updates the state.\r\n       *\r\n       * @param {MessageEvent} event - The message event that triggers the state update.\r\n       */\r\n      const handleChannelMessage = (event) => {\r\n        if (event.data.type === \"stateChange\") {\r\n          setStates(event.data.state);\r\n        }\r\n      };\r\n      window.addEventListener(\"storage\", handleStorageChange);\r\n      channelRef.current = new BroadcastChannel(name);\r\n      channelRef.current.addEventListener(\"message\", handleChannelMessage);\r\n      return () => {\r\n        window.removeEventListener(\"storage\", handleStorageChange);\r\n        channelRef.current?.close();\r\n      };\r\n    }\r\n  } , [name]);\r\n\r\n  useEffect(() => {\r\n    if ( typeof window !== \"undefined\" ) {\r\n      stateRef.current = states;\r\n      localStorage.setItem(name, JSON.stringify(states));\r\n    }\r\n  } , [name , states]);\r\n\r\n  useEffect(() => {\r\n    const syncState = (event) => {\r\n      if ( event.key === name ){\r\n        const newState = JSON.parse(event.newValue);\r\n        setStates(newState);\r\n      }\r\n    };\r\n  } , []);\r\n\r\n  return {\r\n    state: stateProxy.current ,\r\n    store: storeResponse\r\n  };\r\n};\r\n\r\nexport default InfinityStore;\r\n"],"names":["InfinityStore","name","initialStore","callback","arguments","length","undefined","getInitialState","window","storedState","JSON","parse","localStorage","getItem","_objectSpread","_useState","useState","_useState2","_slicedToArray","states","setStates","stateRef","useRef","channelRef","stateProxy","stateManager","useCallback","key","set","valueOrUpdater","prev","_channelRef$current","currentValue","newValue","_typeof","Array","isArray","updatedState","_defineProperty","current","postMessage","type","state","value","get","Proxy","_","prop","_stateManager","getterFunction","Object","assign","handler","put","storeResponse","keys","Error","reduce","result","concat","useEffect","handleStorageChange","event","newState","handleChannelMessage","data","addEventListener","BroadcastChannel","_channelRef$current2","removeEventListener","close","setItem","stringify","store"],"mappings":"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"}